version: 4
data:
  attachedData:
    trivet:
      testSuites: []
      version: 1
  graphs:
    fd-5pfqrBw3YAPli0X_yi:
      metadata:
        description: Generates the configuration and code for a Code Node based on a
          user's request.
        id: fd-5pfqrBw3YAPli0X_yi
        name: Code Node Generator
      nodes:
        '[-P4jrioMlRwwAvby_BgqI]:graphInput "Graph Input"':
          data:
            dataType: string
            defaultValue: Sum two inputs
            id: prompt
            useDefaultValueInput: false
          outgoingConnections:
            - data->"Text" fIZiW_3xLyXZ3t1oXaTJY/spec
          visualData: -1552.419236105042/873.516337043934/287.64850782584654/51//
        '[0P6jhkLtbx7WtpQ4yfNDX]:graphOutput "Graph Output"':
          data:
            dataType: object
            id: configuration
          visualData: 3394.0514149023847/-170.51503973137648/330/104//
        '[1mEM9EWEILNeNqexuK0Bp]:if "If"':
          outgoingConnections:
            - output->"Assemble Prompt" puu83XM1fKYrGzNF4j1U-/message2
          visualData: 2090.7014733701326/112.03155291957617/155/96//
        '[319YuflbBPMYioT5fIS3g]:text "Text"':
          data:
            text: >-
              Rivet is a visual programming IDE where you connect together Nodes
              in order to make programs that interact with large language models
              (LLMs).


              The Code Node is a special node that can execute arbitrary JavaScript. 


              You are a Code Node script writer. The user will give you what they want from the code node, and you output both the code an an explanation of how to use it.


              ## Code Node Specification


              The Code Node has an editor. This editor has 3 parts:


              1. The code block. This is where the body of the code goes, explained later.

              2. The inputs configuration. This is a list of strings the user can modify. The user can add and remove strings, and each string corresponds to one of the input ports on the code node. An input port is where you can connect wires from other nodes, and the data goes into the code node. Each of the configured strings is available at `inputs.x`, where x is the name of the string.

              3. The outputs configuration. This is a list of strings the user can modify. The user can add and remove strings, and each string corresponds to one of the output ports on the code node. An output port is the data that the code node returns, and can be connected to subsequent nodes in the graph.



              ### Code Node Code


              The code you write in the code node runs in the body of a function. This function has roughly this definition:


              ```js

              function codeNode(inputs) {
                  // Your code is pasted in here
              }

              ```


              You do not write the `function codeNode` part, just the body, when writing the code node's code.


              The code node must return an object. The object must have a property for each of the outputs configured above. 


              All values of the code node have the following format:


              ```ts

              {
                  type: string;
                  value: unknown;
              }

              ```


              For example, you have by default, `inputs.input.type` and `inputs.input.value`.


              ## Data Types


              All data types are:


              - "any" (value is anything)

              - "boolean" (value is a boolean)

              - "string" (value is a number)

              - "number" (value is a number)

              - "date" (value is a ISO formatted string)

              - "time" (value is a ISO formatted string)

              - "datetime" (value is an ISO formatted string)

              - "chat-message" (value is an object with `{ type: 'assistant' | 'user' | 'system'; message: string }`)

              - "control-flow-executed" (value is undefined) - This causes nodes connected to this port to not be ran

              - "object" (value is an object or array, similar to any)

              - "vector" (value is an array of numbers)

              - "image" (value is a UInt8Array)

              - "binary" (value is a UIntU8Array)

              - "audio" (value is a UInt8Array)


              All data types may have `[]` appended to them to make them an array of that value. For example, `type: 'string[]'` is an array of strings. `type: 'boolean[]'` is an array of booleans.


              ## Defaults


              By default, the Code Node has:


              - One input named `input`, accessible via `inputs.input`

              - One output named `output`, so you must `return { output: { type: 'etc', value: 'etc' } }`


              ## Examples


              1. Split a string by new lines


              ```js

              const splitted = inputs.input.value.split('\n');

              return {
                  output: {
                      type: 'string[]'
                      value: splitted
                  }
              };

              ```


              2. Add two numbers together


              First, configure the Code Node to have two inputs, `a` and `b`, and an output named `sum`


              ```js

              const sum = inputs.a.value + inputs.b.value;

              return {
                  sum: {
                      type: 'number',
                      value: sum
                  }
              }

              ```


              3. Filter an array of numbers to be numbers greater than `num`


              Configure the Code Node with:


              - An input named `array`

              - An input named `num`

              - An output named `filtered`

              - An output named `length`


              ```js

              const filtered = inputs.array.value.filter(val => val > inputs.num.value);

              return {
                  filtered: {
                      type: 'number[]',
                      value: filtered
                  },
                  length: {
                      type: 'number',
                      value: filtered.length
                  }
              }

              ```


              ## Restrictions


              You must take into account that the code node has the following restrictions:


              - The code node is not ran using node.js. You cannot use `require`.

              - The code node cannot `import` any packages. It is ran in a sandboxed `new Function(...)` sandbox. The variables accessible in this sandboxed environment are `console` and `inputs`

              - The code node cannot use `async` nor `await`. The code node cannot use Promises.

              - The code node must return an object. The properties of the object must correspond with configured input and output values.


              Other than those things explicitly mentioned above, all JavaScript is valid inside a code node!


              You must keep these restrictions in mind when generating code for the Code Node. You cannot generate code that violates these restrictions. You can only generate valid Code Node code.


              The following nodes may work if the user is requesting restricted functions:


              * The `rivet-plugin-example-python-exec` plugin to run python code

              * The `Read File`, `Read Directory` Nodes built-in to Rivet

              * The `Write File` and `Shell Command` nodes in the FS plugin

              * The HTTP Call node can make HTTP requests

              * Writing a custom Rivet plugin to accomplish what you are wanting

              * Using the External Call node to write the code in a parent application that Rivet can call into


              ## Your Role


              The user will give you what they want the code node to do. You will then explain how they should configure the code node, and what the code of the node should be.
          outgoingConnections:
            - output->"Chat" CjLJbPjhdruU-zmPW6Jhm/systemPrompt
            - output->"Chat" EzziKQsubxlludQlCSmS5/systemPrompt
            - output->"Chat" fmAm9-8tUxSxBq8W6oHmo/systemPrompt
          visualData: -726.7897865366365/329.1772579707348/330/33//
        '[5oPR0odAnmYwwA4Zs_Mvb]:comment "Comment"':
          data:
            backgroundColor: rgba(0,0,0,0.05)
            color: rgba(255,255,255,1)
            height: 915.0097396180166
            text: "### 2nd query to make sure the code is correct"
          visualData: 23.178858803127127/408.94922493616093/1533.2626014642121/81//
        '[9GsfADpgO48OoS-fdwjdA]:assemblePrompt "Assemble Prompt"':
          outgoingConnections:
            - prompt->"Chat" CjLJbPjhdruU-zmPW6Jhm/prompt
          visualData: 2357.279661622449/812.5298061807753/280/71//
        '[9p_ku4OqApb_u5QXegpdA]:assemblePrompt "Assemble Prompt"':
          outgoingConnections:
            - prompt->"Chat" EzziKQsubxlludQlCSmS5/prompt
            - prompt->"If" GfukJD1rWUaD_KOq-DE0A/value
          visualData: -717.0170939371682/713.5432398109425/280/32//
        '[CjLJbPjhdruU-zmPW6Jhm]:chat "Chat"':
          data:
            cache: false
            enableFunctionUse: false
            frequencyPenalty: 0
            maxTokens: 1024
            model: gpt-3.5-turbo
            presencePenalty: 0
            stop: ""
            temperature: 0
            top_p: 1
            useAsGraphPartialOutput: true
            useFrequencyPenaltyInput: false
            useMaxTokensInput: false
            useModelInput: true
            usePresencePenaltyInput: false
            useStop: false
            useStopInput: false
            useTemperatureInput: false
            useTopP: false
            useTopPInput: false
            useUseTopPInput: false
            useUserInput: false
          outgoingConnections:
            - response->"Coalesce" f7Q_XCvM9ug7p7cB-6YBh/input1
          visualData: 3028.8834235770914/632.0288899270461/230/null//
        '[EzziKQsubxlludQlCSmS5]:chat "Chat"':
          data:
            cache: false
            enableFunctionUse: false
            frequencyPenalty: 0
            maxTokens: 1024
            model: gpt-4
            presencePenalty: 0
            stop: ""
            temperature: 0
            top_p: 1
            useAsGraphPartialOutput: true
            useFrequencyPenaltyInput: false
            useMaxTokensInput: false
            useModelInput: true
            usePresencePenaltyInput: false
            useStop: false
            useStopInput: false
            useTemperatureInput: false
            useTopP: false
            useTopPInput: false
            useUseTopPInput: false
            useUserInput: false
          outgoingConnections:
            - all-messages->"Assemble Prompt" LYpyRywQiXi08XUJRl0yn/message1
            - all-messages->"Assemble Prompt" puu83XM1fKYrGzNF4j1U-/message1
            - response->"Coalesce" f7Q_XCvM9ug7p7cB-6YBh/input2
            - response->"Extract Markdown Code Blocks"
              sxDLlmtDGO0riiWWEEi6X/input
            - response->"Prompt" sNGzZfMWBnJ2zRrtaPU66/input
          visualData: -290.8634551725346/579.3170909210522/230/37//
        '[G9KtaAPXalxXbUbZiDbl0]:graphOutput "Graph Output"':
          data:
            dataType: string
            id: response
          visualData: 3754.3429826245606/413.1414311116011/330/76//
        '[GfukJD1rWUaD_KOq-DE0A]:if "If"':
          outgoingConnections:
            - output->"Assemble Prompt" 9GsfADpgO48OoS-fdwjdA/message1
          visualData: 2028.871102637096/1002.8416229983525/155/97//
        '[HwcR4nwypZ_WUjrYkcNz2]:text "Text"':
          data:
            text: I will tell you that this is impossible with a Code Node. Please explain
              to me why this cannot be achieved with the Code Node, and provide
              me with some alternatives instead.
          outgoingConnections:
            - output->"Assemble Prompt" 9GsfADpgO48OoS-fdwjdA/message2
          visualData: 1898.1506080289546/1208.5121704548212/330/72//
        '[J4bFCY4R2l5RHElPJ-w-n]:match "Match"':
          data:
            cases:
              - LOOKS OK
          outgoingConnections:
            - case1->"Graph Output" _BTgGCvkQ24wzeWR2K7xw/value
            - case1->"If" 1mEM9EWEILNeNqexuK0Bp/if
            - unmatched->"If" GfukJD1rWUaD_KOq-DE0A/if
          visualData: 1620.5074334190645/946.7672995061329/280/64//
        '[Jjm9r6KVbOyNosl2SaLU1]:text "Text"':
          data:
            text: |-
              What inputs and outputs should I configure for this code?

              Reply with a JSON object like this:

              ```json
              {
                "inputs": ["these", "are", "the", "inputs"],
                "outputs": ["these", "are", "the", "outputs"]
              }
              ```
          outgoingConnections:
            - output->"If" 1mEM9EWEILNeNqexuK0Bp/value
          visualData: 1647.3827227737963/13.5088698504415/330/108//
        '[LYpyRywQiXi08XUJRl0yn]:assemblePrompt "Assemble Prompt"':
          outgoingConnections:
            - prompt->"Chat" fmAm9-8tUxSxBq8W6oHmo/prompt
          visualData: 850.0992506853411/1004.51270259952/280/64//
        '[RYDwAKZ3ZmY5efXzi3dke]:if "If"':
          outgoingConnections:
            - output->"Assemble Prompt" LYpyRywQiXi08XUJRl0yn/message2
          visualData: 625.6368655248732/851.2728451259366/155/67//
        '[TpMSdJZ0PrSBT12aZZkUY]:extractJson "Extract JSON"':
          outgoingConnections:
            - output->"Graph Output" 0P6jhkLtbx7WtpQ4yfNDX/value
          visualData: 3039.1025964821933/-138.70977271554102/280/102//
        '[Ulj7drB7JEyBv2jNn44jz]:comment "Comment"':
          data:
            backgroundColor: rgba(0,0,0,0.05)
            color: rgba(255,255,255,1)
            height: 970.4770224613585
            text: "### If correct, get the inputs and outputs configuration"
          visualData: 1553.1294086690673/-577.7260293972732/2238.1028168320545/106//
        '[Z_qSy2xnId1UfROpdFiOy]:text "Text"':
          data:
            text: >-
              Thank you. Just to double check, you didn't violate any of the
              code node restrictions, did you? Be permissive, I'm just making
              sure you're not using `require`, `import`, `async`, or `await`.


              Reply LOOKS OK or RESTRICTED. You can only reply with LOOKS OK or RESTRICTED and you may include a reason.
          outgoingConnections:
            - output->"Assemble Prompt" LYpyRywQiXi08XUJRl0yn/message3
          visualData: 374.05178128132206/1045.3570121045987/330/64//
        '[_BTgGCvkQ24wzeWR2K7xw]:graphOutput "Graph Output"':
          data:
            dataType: string
            id: code
          visualData: 2433.1385816752395/163.6463229309498/330/107//
        '[aM02bd3jmDg5cZQtxpFfp]:comment "Comment"':
          data:
            backgroundColor: rgba(0,0,0,0.05)
            color: rgba(255,255,255,1)
            height: 976.9015417959613
            text: "### Initial question to generate the code"
          visualData: -1637.2291911884442/228.4700890675118/1607.5652234243616/79//
        '[eMWn7HRkScN6rAMo7NDsq]:prompt "Prompt"':
          data:
            enableFunctionCall: false
            promptText: Hello, what would you like the Code Node to do?
            type: assistant
            useTypeInput: false
          outgoingConnections:
            - output->"Assemble Prompt" 9p_ku4OqApb_u5QXegpdA/message1
          visualData: -1108.4581203475575/638.8682964068248/280/27//
        '[f7Q_XCvM9ug7p7cB-6YBh]:coalesce "Coalesce"':
          outgoingConnections:
            - output->"Graph Output" G9KtaAPXalxXbUbZiDbl0/value
          visualData: 3457.492181353439/431.0952176456849/180/75//
        '[fIZiW_3xLyXZ3t1oXaTJY]:text "Text"':
          data:
            text: >-
              I would like the code node to follow the following specification:


              """

              {{spec}}

              """


              Please reply with a markdown block that I can paste into the Code Node.


              If the specification is invalid for any reason, such as impossible requirements, or things that are not possible for a code node, do not include a code block, and tell me what is wrong with the specification.


              To save space and time, only reply with the code inside a code block, please.
          outgoingConnections:
            - output->"Assemble Prompt" 9p_ku4OqApb_u5QXegpdA/message2
          visualData: -1159.414078546703/820.6518251580231/330/44//
        '[fmAm9-8tUxSxBq8W6oHmo]:chat "Chat"':
          data:
            cache: false
            enableFunctionUse: false
            frequencyPenalty: 0
            maxTokens: 8
            model: gpt-3.5-turbo
            numberOfChoices: 1
            presencePenalty: 0
            stop: ""
            temperature: 0
            top_p: 1
            useAsGraphPartialOutput: true
            useFrequencyPenaltyInput: false
            useMaxTokensInput: false
            useModelInput: false
            usePresencePenaltyInput: false
            useStop: false
            useStopInput: false
            useTemperatureInput: false
            useTopP: false
            useTopPInput: false
            useUseTopPInput: false
            useUserInput: false
          outgoingConnections:
            - response->"Match" J4bFCY4R2l5RHElPJ-w-n/input
          visualData: 1227.5570074908946/921.4156591236706/230/64//
        '[girfWNhmDz24NtWgpIXQU]:graphInput "Graph Input"':
          data:
            dataType: string
            defaultValue: gpt-3.5-turbo
            id: model
            useDefaultValueInput: false
          outgoingConnections:
            - data->"Chat" CjLJbPjhdruU-zmPW6Jhm/model
            - data->"Chat" EzziKQsubxlludQlCSmS5/model
          visualData: -1135.2269437747914/447.68092596305564/294.1641220064855/45//
        '[iV_N5g9y64eD9t9_oRU2S]:chat "Chat"':
          data:
            cache: false
            enableFunctionUse: false
            frequencyPenalty: 0
            maxTokens: 1024
            model: gpt-3.5-turbo
            presencePenalty: 0
            stop: ""
            temperature: 0.5
            top_p: 1
            useAsGraphPartialOutput: true
            useFrequencyPenaltyInput: false
            useMaxTokensInput: false
            useModelInput: false
            usePresencePenaltyInput: false
            useStop: false
            useStopInput: false
            useTemperatureInput: false
            useTopP: false
            useTopPInput: false
            useUseTopPInput: false
            useUserInput: false
          outgoingConnections:
            - response->"Extract JSON" TpMSdJZ0PrSBT12aZZkUY/input
          visualData: 2703.048336692004/-194.010038589744/230/100//
        '[ooYA3jXKgPtNL6pYgLLt3]:comment "Comment"':
          data:
            backgroundColor: rgba(0,0,0,0.05)
            color: rgba(255,255,255,1)
            height: 976.1863868724195
            text: "### If incorrect, explain why it's impossible with the code node"
          visualData: 1579.1467316866808/452.2108448546919/1758.5591606172588/83//
        '[puu83XM1fKYrGzNF4j1U-]:assemblePrompt "Assemble Prompt"':
          outgoingConnections:
            - prompt->"Chat" iV_N5g9y64eD9t9_oRU2S/prompt
          visualData: 2319.182735344136/-111.75488860290679/280/94//
        '[sNGzZfMWBnJ2zRrtaPU66]:prompt "Prompt"':
          data:
            enableFunctionCall: false
            promptText: "{{input}}"
            type: assistant
            useTypeInput: false
          outgoingConnections:
            - output->"If" RYDwAKZ3ZmY5efXzi3dke/value
          visualData: 92.32216945628014/885.2124216965464/280/84//
        '[sxDLlmtDGO0riiWWEEi6X]:extractMarkdownCodeBlocks "Extract Markdown Code Blocks"':
          outgoingConnections:
            - firstBlock->"If" RYDwAKZ3ZmY5efXzi3dke/if
            - firstBlock->"Match" J4bFCY4R2l5RHElPJ-w-n/value
          visualData: 93.22129334676526/626.8160707712718/280/66//
    jAiJgUaPnUwcZCrrYd8L9:
      metadata:
        description: Generates the configuration and code for a Code Node based on a
          user's request.
        id: jAiJgUaPnUwcZCrrYd8L9
        name: Extract Regex Node Generator
      nodes:
        '[1v1JhI_bO0XN1c1e6sJ1f]:comment "Comment"':
          data:
            backgroundColor: rgba(0,0,0,0.05)
            color: rgba(255,255,255,1)
            height: 1218.6503689348447
            text: "### Initial question to generate the code"
          visualData: -1637.2291911884442/228.4700890675118/1639.5188375265523/79//
        '[4gNuUOCIlWH47c7CevT-m]:gptFunction "GPT Function"':
          data:
            description: "Configures the Extract Regex node with certain parameters. "
            name: configureExtractRegexNode
            schema: >-
              {
                "type": "object",
                "properties": {
                  "regex": {
                    "type": "string",
                    "description": "The regular expression that will be used to test against the input string."
                  },
                  "multiline": {
                    "type": "boolean",
                    "description": "Whether the regular expression should be in \"multiline\" mode where beginning and end anchors (^ and $) will match the start and end of a line, instead of the start and end of the whole string."
                  }
                },
                "required": ["regex", "multiline"]
              }
          outgoingConnections:
            - function->"Array" pJeBICA99sgbXnub9h7F6/input1
          visualData: -733.5260024014706/953.8436938494237/280/110//
        '[6nbYMNjoJ3_2fb_ivhrCz]:destructure "Destructure"':
          data:
            paths:
              - $.arguments.regex
              - $.arguments.multiline
          outgoingConnections:
            - match_0->"Graph Output" jbk5KmyMXfEDzwZ2cf95r/value
            - match_1->"Graph Output" fwjFxUTsUiwDvdQNyRjsN/value
          visualData: 545.6494911633437/495.07322840008135/280/151//
        '[7VBZ6x9-K6AfrX0S_Lthf]:comment "Comment"':
          data:
            backgroundColor: rgba(0,0,0,0.05)
            color: rgba(255,255,255,1)
            height: 977.486391096598
            text: "### Response Extraction"
          visualData: 186.03967739541122/100.77978069649924/1163.9263417574475/145//
        '[GSMGkalRyphL4foJ70C_N]:prompt "Prompt"':
          data:
            enableFunctionCall: false
            promptText: Hello, what would you like the Extract Regex Node to do?
            type: assistant
            useTypeInput: false
          outgoingConnections:
            - output->"Assemble Prompt" qD_bTJD9QSanaKT9r9i_c/message1
          visualData: -1131.5264250597115/626.2855847456499/280/111//
        '[KniQEFryMfVrjj9AU6Bjs]:text "Text"':
          data:
            regex: ""
            text: >-
              Rivet is a visual programming IDE where you connect together Nodes
              in order to make programs that interact with large language models
              (LLMs).


              The Extract Regex node is a node which can, given a string input and a regular expression, either:


              1. Extract one or more outputs using capture groups in the regular expression

              2. Test if the string matches the regular expression


              You are a Extract Regex Node script writer. The user will give you what they want from the Extract Regex Node, and you output the regular expression which accomplishes what the user wants.


              ## Code Node Specification


              The Code Node has an editor. This editor has 2 parts:


              1. The regex block. This is where the regular expression itself goes.

              2. A "multiline" toggle. Toggling this on is equivalent to a regular expression with the multiline flag enabled, e.g. /test/m. 


              The code node has N+3 number of output ports, where N is the number of capturing groups in the regular expression. Output ports are where the user can connect wires in their Rivet program. Any or all of the outputs can be used by the user:


              1. Output N: This is the contents of the Nth capture group.

              2. Matches: This is an array of all matches the regular expression has against the input string.

              3. Succeeded: This is a boolean port that is true if the regular expression succeeded against the input string.

              4. Failed: This is a boolean port that is true if there were no matches against the input string.


              ## Examples


              1. Test if a string contains "foo"


              ```regex

              foo

              ```


              This is designed for use with the `succeeded` or `failed` outputs


              2. Extract the text between square brackets


              ```regex

              \[(.+)\]

              ```


              This will give a single `Output 1` output in addition to the 3 always-present outputs.


              3. Extract the text before and after a colon


              ```regex

              (.+): (.+)

              ```


              This will give an `Output 1` output and an `Output 2` output corresponding to each of the capture groups.


              4. Split text by newlines


              ```regex

              ^.+$

              ```


              MULTILINE: true


              This is designed for use with the `matches` output, where an array of matches is desired.


              5. Extract the 2nd number


              ```regex

              (?:\d+).+(\d+)

              ```


              This uses a non-capturing group to skip the first number, so there is only one output.


              ## Your Role


              The user will give you what they want the regex node to do. You will then call a function with the configuration needed for the Extract Regex node so that the user gets what they want.


              If the Extract Regex Node cannot accomplish what the user asks for, you explain (in one short paragraph!) why it cannot be used to accomplish what they are asking for, using the `impossibleRequest` function.


              You should attempt even complex requests by calling a function. The user cannot reply to your messages, so either call the `configureExtractRegexNode` if the request is possible at all, or tell the user their request is impossible.
          outgoingConnections:
            - output->"Chat" hDyRjVNVVUFwT-10RYalQ/systemPrompt
          visualData: -726.7897865366365/329.1772579707348/330/33//
        '[LskrRsF9hS-TY8eatLQwm]:destructure "Destructure"':
          data:
            paths:
              - $.arguments.reason
          outgoingConnections:
            - match_0->"Graph Output" ejZlxZkLtMNpXQTRHo7AG/value
          visualData: 572.7052930301397/802.8085188827602/280/152//
        '[SGgVxd-yFHIzY3WuteMz9]:match "Match"':
          data:
            cases:
              - configureExtractRegexNode
              - impossibleRequest
          outgoingConnections:
            - case1->"Destructure" 6nbYMNjoJ3_2fb_ivhrCz/object
            - case2->"Destructure" LskrRsF9hS-TY8eatLQwm/object
          visualData: 229.05132289300522/653.6214687275316/280/155//
        '[XvuhFM3f5h6dgWQARxPog]:text "Text"':
          data:
            text: >-
              I would like the extract regex node to follow the following
              specification:


              """

              {{spec}}

              """


              Please call the `configureExtractRegexNode` function with the configuration for the Extract Regex node following this specification.


              If the specification is invalid for any reason, such as impossible requirements, or things that are not possible for an Extract Regex Node, call the `impossibleRequest` function with a reason why.
          outgoingConnections:
            - output->"Assemble Prompt" qD_bTJD9QSanaKT9r9i_c/message2
          visualData: -1159.414078546703/820.6518251580231/330/44//
        '[_MMPp2SDYcuMIu-l-6VF4]:gptFunction "GPT Function"':
          data:
            description: "Call this function if the request is impossible. "
            name: impossibleRequest
            schema: >-
              {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "A reason for why the user's request is impossible."
                  }
                },
                "required": ["reason"]
              }
          outgoingConnections:
            - function->"Array" pJeBICA99sgbXnub9h7F6/input2
          visualData: -746.4223083424073/1212.091413058617/280/146//
        '[ejZlxZkLtMNpXQTRHo7AG]:graphOutput "Graph Output"':
          data:
            dataType: string
            id: response
          visualData: 927.1071142825798/783.3431099999461/330/153//
        '[fwjFxUTsUiwDvdQNyRjsN]:graphOutput "Graph Output"':
          data:
            dataType: boolean
            id: multiline
          visualData: 922.6022844380896/527.374761642198/330/143//
        '[hDyRjVNVVUFwT-10RYalQ]:chat "Chat"':
          data:
            additionalParameters: []
            cache: false
            enableFunctionUse: true
            frequencyPenalty: 0
            maxTokens: 1024
            model: gpt-4o-mini
            parallelFunctionCalling: false
            presencePenalty: 0
            stop: ""
            temperature: 0
            toolChoice: required
            top_p: 1
            useAsGraphPartialOutput: true
            useFrequencyPenaltyInput: false
            useMaxTokensInput: false
            useModelInput: true
            usePresencePenaltyInput: false
            useStop: false
            useStopInput: false
            useTemperatureInput: false
            useTopP: false
            useTopPInput: false
            useUseTopPInput: false
            useUserInput: false
          outgoingConnections:
            - function-call->"Match" SGgVxd-yFHIzY3WuteMz9/input
            - function-call->"Match" SGgVxd-yFHIzY3WuteMz9/value
          visualData: -290.8634551725346/579.3170909210522/230/37//
        '[jbk5KmyMXfEDzwZ2cf95r]:graphOutput "Graph Output"':
          data:
            dataType: string
            id: regex
          visualData: 915.0865361282738/300.31027676686/330/142//
        '[pJeBICA99sgbXnub9h7F6]:array "Array"':
          data:
            flatten: true
            flattenDeep: false
          outgoingConnections:
            - output->"Chat" hDyRjVNVVUFwT-10RYalQ/functions
          visualData: -415.25017808902794/931.6666997986916/230/148//
        '[qD_bTJD9QSanaKT9r9i_c]:assemblePrompt "Assemble Prompt"':
          outgoingConnections:
            - prompt->"Chat" hDyRjVNVVUFwT-10RYalQ/prompt
          visualData: -717.0170939371682/713.5432398109425/280/32//
        '[sMDC9KTP66MkDb-e7tTeA]:graphInput "Graph Input"':
          data:
            dataType: string
            defaultValue: replace "foo" with "bar"
            id: prompt
            useDefaultValueInput: false
          outgoingConnections:
            - data->"Text" XvuhFM3f5h6dgWQARxPog/spec
          visualData: -1552.419236105042/873.516337043934/287.64850782584654/51//
        '[xJ63RAwAntofJn917ykIZ]:graphInput "Graph Input"':
          data:
            dataType: string
            defaultValue: gpt-4o-mini
            id: model
            useDefaultValueInput: false
          outgoingConnections:
            - data->"Chat" hDyRjVNVVUFwT-10RYalQ/model
          visualData: -1135.2269437747914/447.68092596305564/294.1641220064855/45//
  metadata:
    description: ""
    id: 4tDjaNgAP-udJg2Uoz6JI
    title: Code Node Generator
  plugins: []
